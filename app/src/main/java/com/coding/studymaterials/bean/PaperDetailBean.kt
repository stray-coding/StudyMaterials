package com.coding.studymaterials.bean

/**
 * @author: Coding.He
 * @date: 2020/6/19
 * @emil: stray-coding@foxmail.com
 * @des:
 */
data class PaperDetailBean(
    var status: Int = 0,
    var data: DataBean
) {
    /**
    "_id": "5e7225672b34a0e184e1e4b9",
    "author": "李金山",
    "category": "GanHuo",
    "content": "<p>flutter吐司库，自定义设置吐司标题，内容，背景颜色，文字颜色，字体大小，背景圆角，吐司时间等等</p>\n<h1>YCFlutterToast flutter版本的吐司库，使用十分方便</h1>\n<h4>目录介绍</h4>\n<ul>\n<li>01.flutter版吐司介绍</li>\n<li>02.具有的优势分析</li>\n<li>03.使用说明文档</li>\n<li>04.相关的属性介绍</li>\n<li>05.优化点说明</li>\n<li>06.自定义吐司图片展示</li>\n<li>07.遇到的问题介绍</li>\n<li>08.其他更多内容</li>\n</ul>\n<h3>01.flutter版吐司介绍</h3>\n<ul>\n<li>flutter中没有吐司这个widget，所以想要用吐司，则可以用原生java或者kotlin代码实现吐司效果。然后通过MethodChannel数据通道，flutter和Android建立连接，既可以让flutter调用到Android中的吐司，达到想要的效果。</li>\n<li>自定义吐司支持设置吐司标题，内容，背景颜色，文字颜色，字体大小，背景圆角，吐司时间等等。系统吐司则只可设置文字。可以直接运行example中的main.dart查看实际效果！</li>\n</ul>\n<h3>02.具有的优势分析</h3>\n<ul>\n<li>自定义吐司，可以设置多种属性，可以满足不同的需求场景。同时可以手动设置吐司取消状态等等。</li>\n</ul>\n<h3>03.使用说明文档</h3>\n<ul>\n<li>yc_toast依赖方式<pre><code>yc_toast: ^0.0.1\n</code></pre>\n</li>\n<li>flutter调用吐司介绍\n<ul>\n<li>最简单的吐司</li>\n</ul>\n<pre><code>YcToast.showToast(\n  title: \"逗比吐司\",\n);\n</code></pre>\n<ul>\n<li>设置位置在中间</li>\n</ul>\n<pre><code>YcToast.showToast(\n    title: \"逗比吐司\",\n    toastLength: Toast.LENGTH_SHORT,\n    gravity: ToastGravity.CENTER);\n</code></pre>\n<ul>\n<li>设置字体大小</li>\n</ul>\n<pre><code>YcToast.showToast(\n    title: \"逗比\",\n    fontSize: 14,);\n</code></pre>\n<ul>\n<li>设置吐司圆角</li>\n</ul>\n<pre><code>YcToast.showToast(\n    title: \"逗比\",\n    radius:25,\n    gravity: ToastGravity.CENTER);\n</code></pre>\n<ul>\n<li>设置背景和颜色</li>\n</ul>\n<pre><code>YcToast.showToast(\n    title: \"逗比\",\n    desc: \"这个是内容\",\n    toastLength: Toast.LENGTH_SHORT,\n    fontSize: 14,\n    radius:20,\n    bgColor: Color(0xFFB71C1C),\n    textColor: Color(0xFF4A148C),\n    gravity: ToastGravity.CENTER,);\n</code></pre>\n<ul>\n<li>设置系统吐司</li>\n</ul>\n<pre><code>YcToast.showToast(\n    title: \"逗比\",\n    type: Type.SYSTEM,\n    toastLength: Toast.LENGTH_SHORT);\n</code></pre>\n</li>\n<li>如何取消吐司呢？<pre><code>YcToast.cancel();\n</code></pre>\n</li>\n</ul>\n<h3>04.相关的属性介绍</h3>\n<ul>\n<li>调用show吐司的参数说明\n<ul>\n<li>其中，title是必须要传递的参数。其他可以选择性传递参数……</li>\n</ul>\n<pre><code>static Future&lt;bool&gt; showToast({\n    //吐司标题，这个参数是必须的，需要用@required修饰\n    @required String title,\n    //吐司类型，这个参数是必须的\n    Type type,\n    //吐司内容，不必须\n    String desc,\n    //吐司控件的圆角半径，默认是5\n    double radius = 10,\n    //吐司时间\n    Toast toastLength,\n    //吐司title的文字大小\n    double fontSize = 16.0,\n    //吐司位置\n    ToastGravity gravity,\n    //吐司标题颜色\n    Color textColor,\n    //吐司背景颜色\n    Color bgColor,\n})\n</code></pre>\n</li>\n<li>几个枚举属性介绍<pre><code>///吐司类型，SYSTEM是系统默认吐司，CUSTOM是自定义吐司\nenum Type { SYSTEM, CUSTOM }\n///吐司时间\nenum Toast { LENGTH_SHORT, LENGTH_LONG }\n///吐司的位置\nenum ToastGravity { TOP, BOTTOM, CENTER }\n</code></pre>\n</li>\n<li>部分参数默认值说明，代码如下所示\n<ul>\n<li>可以发现，吐司时间默认是short，吐司类型默认是自定义，吐司位置默认值底部的，吐司颜色默认白色文字，黑色背景。</li>\n</ul>\n<pre><code> async {\n    //吐司时间\n    String length = \"short\";\n    if (toastLength == Toast.LENGTH_LONG) {\n      length = \"long\";\n    }\n\n    //吐司类型\n    String typeToast = \"SYSTEM\";\n    if(type == Type.SYSTEM){\n      typeToast = \"SYSTEM\";\n    }else{\n      typeToast = \"CUSTOM\";\n    }\n\n    //吐司位置\n    String gravityToast = \"center\";\n    if (gravity == ToastGravity.TOP) {\n      gravityToast = \"top\";\n    } else if (gravity == ToastGravity.CENTER) {\n      gravityToast = \"center\";\n    } else {\n      gravityToast = \"bottom\";\n    }\n\n    //吐司背景颜色\n    if(bgColor == null) {\n      bgColor = Colors.black;\n    }\n\n    //吐司标题颜色\n    if(textColor == null) {\n      textColor = Colors.white;\n    }\n\n    final Map&lt;String, dynamic&gt; params = &lt;String, dynamic&gt;{\n      'title': title,\n      'desc': desc,\n      'typeToast':typeToast,\n      'radius':radius,\n      'length': length,\n      'gravity': gravityToast,\n      'fontSize': fontSize,\n      'bgColor': bgColor != null ? bgColor.value : null,\n      'textColor': textColor != null ? textColor.value: null,\n    };\n    bool isSuccess = await _channel.invokeMethod(yc_show_toast, params);\n    print(\"flutter-onMethodCall--\"+isSuccess.toString());\n    return isSuccess;\n  }\n</code></pre>\n</li>\n</ul>\n<h3>05.优化点说明</h3>\n<ul>\n<li>注意问题\n<ul>\n<li>关于MethodChannel数据通道需要一个CHANNEL名称需要对应一样，否则无法通信。</li>\n</ul>\n<pre><code>//在flutter中\n//这个与Android中的channel要对应相同\nstatic const  channel = \"yc/flutter_toast\";\n//创建channel数据通道\nstatic const MethodChannel _channel = const MethodChannel(channel);\n\n\n//在kotlin中\ncompanion object {\n    // ANDROID_CHANNEL 是我们 method channel 的名称，很重要，Dart 代码里还需要用到它。\n    private const val ANDROID_CHANNEL = \"yc/flutter_toast\"\n\n    @JvmStatic\n    fun registerWith(registrar: Registrar) {\n        val channel = MethodChannel(registrar.messenger(), ANDROID_CHANNEL)\n        val context = registrar.context()\n        channel.setMethodCallHandler(YcToastPlugin(context))\n    }\n}\n</code></pre>\n</li>\n</ul>\n<h3>06.自定义吐司图片展示</h3>\n<p><img src=\"https://gank.io/images/1cf23ad310874b77992c89c419c794fc\" alt=\"image\"><br>\n<img src=\"https://gank.io/images/dd16f4a562a74d8685c5a46cafdd460a\" alt=\"image\"><br>\n<img src=\"https://gank.io/images/d2ff47a05a5a4d4b81de3430047c14ca\" alt=\"image\"><br>\n<img src=\"https://gank.io/images/19774238376a4c48b813d70e9af16644\" alt=\"image\"></p>\n<h3>07.遇到的问题介绍</h3>\n<ul>\n<li>01.flutter Failed to handle method call\n<ul>\n<li>问题：flutter无法处理方法调用，查看channel名称是否一致。注意，flutter和Android原生通信的channel字段要一样哦！</li>\n</ul>\n</li>\n<li>02.pub上传失败\n<ul>\n<li>上传指令\n<ul>\n<li>flutter packages pub publish --dry-run    检查看是否没有问题</li>\n<li>flutter packages pub publish              上传</li>\n</ul>\n</li>\n<li>错误场景：\n<ul>\n<li>已经通过西游vpn翻墙，已经通过flutter packages pub publish指令提交代码，同时也打开了提示中的链接https:开头，以.email结尾的地址授权。最后还是报错！</li>\n<li>网上有说下面的错误产生的根源是，需要给终端设置代理，也就是命令行代理。但是不知道window端该如何解决……参考文章链接：<a href=\"https://blog.csdn.net/qq_26287435/article/details/89313269\">发布失败问题解决</a></li>\n</ul>\n</li>\n<li>错误日志：<pre><code>Pub needs your authorization to upload packages on your behalf.\nIn a web browser, go to https://accounts.google.com/o/oauth2/auth?access_type=offline&amp;approval_prompt=force&amp;response_type=code&amp;client_id=818368855108-8grd2eg9tj9f38os6f1urbcvsq399u8n.apps.googleusercontent.com&amp;redirect_uri=http%3A%2F%2Flocal\nhost%3A53203&amp;scope=https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fuserinfo.email\nThen click \"Allow access\".\n\nWaiting for your authorization...\nAuthorization received, processing...\nIt looks like accounts.google.com is having some trouble.\nPub will wait for a while before trying to connect again.\nOS Error: 信号灯超时时间已到\n, errno = 121, address = accounts.google.com, port = 53491\npub finished with exit code 69\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n",
    "createdAt": "2019-06-21 10:05:53",
    "desc": "flutter吐司库，自定义设置吐司标题，内容，背景颜色，文字颜色，字体大小，背景圆角，吐司时间等等",
    "images": [
    "https://gank.io/images/1cf23ad310874b77992c89c419c794fc",
    "https://gank.io/images/19774238376a4c48b813d70e9af16644"
    ],
    "index": 0,
    "isOriginal": true,
    "license": null,
    "likeCount": 0,
    "likeCounts": 0,
    "likes": [],
    "markdown": "flutter吐司库，自定义设置吐司标题，内容，背景颜色，文字颜色，字体大小，背景圆角，吐司时间等等\n\n# YCFlutterToast flutter版本的吐司库，使用十分方便\n#### 目录介绍\n- 01.flutter版吐司介绍\n- 02.具有的优势分析\n- 03.使用说明文档\n- 04.相关的属性介绍\n- 05.优化点说明\n- 06.自定义吐司图片展示\n- 07.遇到的问题介绍\n- 08.其他更多内容\n\n\n### 01.flutter版吐司介绍\n- flutter中没有吐司这个widget，所以想要用吐司，则可以用原生java或者kotlin代码实现吐司效果。然后通过MethodChannel数据通道，flutter和Android建立连接，既可以让flutter调用到Android中的吐司，达到想要的效果。\n- 自定义吐司支持设置吐司标题，内容，背景颜色，文字颜色，字体大小，背景圆角，吐司时间等等。系统吐司则只可设置文字。可以直接运行example中的main.dart查看实际效果！\n\n\n\n### 02.具有的优势分析\n- 自定义吐司，可以设置多种属性，可以满足不同的需求场景。同时可以手动设置吐司取消状态等等。\n\n\n### 03.使用说明文档\n- yc_toast依赖方式\n    ```\n    yc_toast: ^0.0.1\n    ```\n- flutter调用吐司介绍\n    - 最简单的吐司\n    ```\n    YcToast.showToast(\n      title: \"逗比吐司\",\n    );\n    ```\n    - 设置位置在中间\n    ```\n    YcToast.showToast(\n        title: \"逗比吐司\",\n        toastLength: Toast.LENGTH_SHORT,\n        gravity: ToastGravity.CENTER);\n    ```\n    - 设置字体大小\n    ```\n    YcToast.showToast(\n        title: \"逗比\",\n        fontSize: 14,);\n    ```\n    - 设置吐司圆角\n    ```\n    YcToast.showToast(\n        title: \"逗比\",\n        radius:25,\n        gravity: ToastGravity.CENTER);\n    ```\n    - 设置背景和颜色\n    ```\n    YcToast.showToast(\n        title: \"逗比\",\n        desc: \"这个是内容\",\n        toastLength: Toast.LENGTH_SHORT,\n        fontSize: 14,\n        radius:20,\n        bgColor: Color(0xFFB71C1C),\n        textColor: Color(0xFF4A148C),\n        gravity: ToastGravity.CENTER,);\n    ```\n    - 设置系统吐司\n    ```\n    YcToast.showToast(\n        title: \"逗比\",\n        type: Type.SYSTEM,\n        toastLength: Toast.LENGTH_SHORT);\n    ```\n- 如何取消吐司呢？\n    ```\n    YcToast.cancel();\n    ```\n\n\n\n### 04.相关的属性介绍\n- 调用show吐司的参数说明\n    - 其中，title是必须要传递的参数。其他可以选择性传递参数……\n    ```\n    static Future<bool> showToast({\n        //吐司标题，这个参数是必须的，需要用@required修饰\n        @required String title,\n        //吐司类型，这个参数是必须的\n        Type type,\n        //吐司内容，不必须\n        String desc,\n        //吐司控件的圆角半径，默认是5\n        double radius = 10,\n        //吐司时间\n        Toast toastLength,\n        //吐司title的文字大小\n        double fontSize = 16.0,\n        //吐司位置\n        ToastGravity gravity,\n        //吐司标题颜色\n        Color textColor,\n        //吐司背景颜色\n        Color bgColor,\n    })\n    ```\n- 几个枚举属性介绍\n    ```\n    ///吐司类型，SYSTEM是系统默认吐司，CUSTOM是自定义吐司\n    enum Type { SYSTEM, CUSTOM }\n    ///吐司时间\n    enum Toast { LENGTH_SHORT, LENGTH_LONG }\n    ///吐司的位置\n    enum ToastGravity { TOP, BOTTOM, CENTER }\n    ```\n- 部分参数默认值说明，代码如下所示\n    - 可以发现，吐司时间默认是short，吐司类型默认是自定义，吐司位置默认值底部的，吐司颜色默认白色文字，黑色背景。\n    ```\n     async {\n        //吐司时间\n        String length = \"short\";\n        if (toastLength == Toast.LENGTH_LONG) {\n          length = \"long\";\n        }\n\n        //吐司类型\n        String typeToast = \"SYSTEM\";\n        if(type == Type.SYSTEM){\n          typeToast = \"SYSTEM\";\n        }else{\n          typeToast = \"CUSTOM\";\n        }\n\n        //吐司位置\n        String gravityToast = \"center\";\n        if (gravity == ToastGravity.TOP) {\n          gravityToast = \"top\";\n        } else if (gravity == ToastGravity.CENTER) {\n          gravityToast = \"center\";\n        } else {\n          gravityToast = \"bottom\";\n        }\n\n        //吐司背景颜色\n        if(bgColor == null) {\n          bgColor = Colors.black;\n        }\n\n        //吐司标题颜色\n        if(textColor == null) {\n          textColor = Colors.white;\n        }\n\n        final Map<String, dynamic> params = <String, dynamic>{\n          'title': title,\n          'desc': desc,\n          'typeToast':typeToast,\n          'radius':radius,\n          'length': length,\n          'gravity': gravityToast,\n          'fontSize': fontSize,\n          'bgColor': bgColor != null ? bgColor.value : null,\n          'textColor': textColor != null ? textColor.value: null,\n        };\n        bool isSuccess = await _channel.invokeMethod(yc_show_toast, params);\n        print(\"flutter-onMethodCall--\"+isSuccess.toString());\n        return isSuccess;\n      }\n    ```\n\n\n### 05.优化点说明\n- 注意问题\n    - 关于MethodChannel数据通道需要一个CHANNEL名称需要对应一样，否则无法通信。\n    ```\n    //在flutter中\n    //这个与Android中的channel要对应相同\n    static const  channel = \"yc/flutter_toast\";\n    //创建channel数据通道\n    static const MethodChannel _channel = const MethodChannel(channel);\n\n\n    //在kotlin中\n    companion object {\n        // ANDROID_CHANNEL 是我们 method channel 的名称，很重要，Dart 代码里还需要用到它。\n        private const val ANDROID_CHANNEL = \"yc/flutter_toast\"\n\n        @JvmStatic\n        fun registerWith(registrar: Registrar) {\n            val channel = MethodChannel(registrar.messenger(), ANDROID_CHANNEL)\n            val context = registrar.context()\n            channel.setMethodCallHandler(YcToastPlugin(context))\n        }\n    }\n    ```\n\n\n### 06.自定义吐司图片展示\n![image](https://gank.io/images/1cf23ad310874b77992c89c419c794fc)\n![image](https://gank.io/images/dd16f4a562a74d8685c5a46cafdd460a)\n![image](https://gank.io/images/d2ff47a05a5a4d4b81de3430047c14ca)\n![image](https://gank.io/images/19774238376a4c48b813d70e9af16644)\n\n\n\n### 07.遇到的问题介绍\n- 01.flutter Failed to handle method call\n    - 问题：flutter无法处理方法调用，查看channel名称是否一致。注意，flutter和Android原生通信的channel字段要一样哦！\n- 02.pub上传失败\n    - 上传指令\n        - flutter packages pub publish --dry-run    检查看是否没有问题\n        - flutter packages pub publish              上传\n    - 错误场景：\n        - 已经通过西游vpn翻墙，已经通过flutter packages pub publish指令提交代码，同时也打开了提示中的链接https:开头，以.email结尾的地址授权。最后还是报错！\n        - 网上有说下面的错误产生的根源是，需要给终端设置代理，也就是命令行代理。但是不知道window端该如何解决……参考文章链接：[发布失败问题解决](https://blog.csdn.net/qq_26287435/article/details/89313269)\n    - 错误日志：\n        ```\n        Pub needs your authorization to upload packages on your behalf.\n        In a web browser, go to https://accounts.google.com/o/oauth2/auth?access_type=offline&approval_prompt=force&response_type=code&client_id=818368855108-8grd2eg9tj9f38os6f1urbcvsq399u8n.apps.googleusercontent.com&redirect_uri=http%3A%2F%2Flocal\n        host%3A53203&scope=https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fuserinfo.email\n        Then click \"Allow access\".\n\n        Waiting for your authorization...\n        Authorization received, processing...\n        It looks like accounts.google.com is having some trouble.\n        Pub will wait for a while before trying to connect again.\n        OS Error: 信号灯超时时间已到\n        , errno = 121, address = accounts.google.com, port = 53491\n        pub finished with exit code 69\n        ```\n\n\n\n",
    "originalAuthor": null,
    "publishedAt": "2019-06-23 07:11:47",
    "stars": 3,
    "status": 1,
    "tags": [
    "Flutter",
    "Library"
    ],
    "title": "YCFlutterToast",
    "type": "Flutter",
    "updatedAt": "2020-03-28 17:07:21",
    "url": "https://github.com/yangchong211/YCFlutterToast",
    "views": 781
     */
    data class DataBean(
        var _id: String = "",
        var author: String = "",
        var category: String = "",
        var content: String = "",
        var createdAt: String = "",
        var desc: String = "",
        var email: String = "",
        var images: List<String> = arrayListOf(),
        var index: Int = 0,
        var isOriginal: Boolean = false,
        var license: String = "",
        var likeCounts: Int = 0,
        var likes: List<String> = arrayListOf(),
        var markdown: String = "",
        var originalAuthor: String = "",
        var publishedAt: String = "",
        var stars: Int = 0,
        var status: Int = 0,
        var tags: List<String> = arrayListOf(),
        var title: String = "",
        var type: String = "",
        var updatedAt: String = "",
        var url: String = "",
        var views: Int = 0
    )

}


